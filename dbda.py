# -*- coding: utf-8 -*-
"""DBDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10scbXxHBjjH_jL8Px7JLci0Psdyxgpw3
"""

# Import necessary libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Create a hypothetical dataset

np.random.seed(42) # Setting seed for reproducibility
study_hours = np.random.uniform(1, 10, 50) # Generating 50 random study hours
exam_scores = 50 + 10 * study_hours + np.random.normal(0, 5, 50) #Generating exam scores with some noise

# Create a DataFrame

data = pd.DataFrame({'Study Hours': study_hours, 'Exam Scores': exam_scores})

# Visualize the data

plt.scatter(data['Study Hours'], data['Exam Scores'])
plt.title('Relationship between Study Hours and Exam Scores')
plt.xlabel('Study Hours')
plt.ylabel('Exam Scores')
plt.show()



# Calculate and print descriptive statistics

mean_study_hours = data['Study Hours'].mean()
median_exam_scores = data['Exam Scores'].median()
std_study_hours = data['Study Hours'].std()
print(f'Mean Study Hours: {mean_study_hours}')
print(f'Median Exam Scores: {median_exam_scores}')
print(f'Standard Deviation Study Hours: {std_study_hours}')

# Calculate Pearson correlation coefficient

correlation_coefficient, p_value = pearsonr(data['Study Hours'], data['Exam Scores'])
print(f'Pearson Correlation Coefficient: {correlation_coefficient}')
print(f'P-value: {p_value}')



# Perform a linear regression

from sklearn.linear_model import LinearRegression

X = data[['Study Hours']]
y = data['Exam Scores']
regressor = LinearRegression()
regressor.fit(X, y)

# Visualize the linear regression line

plt.scatter(data['Study Hours'], data['Exam Scores'])
plt.plot(data['Study Hours'], regressor.predict(X), color = 'red', linewidth=3)
plt.title('Linear Regression: Study Hours vs Exam Scores')
plt.xlabel('Study Hours')
plt.ylabel('Exam Scores')
plt.show()